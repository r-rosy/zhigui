{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport Vue from 'vue'; //引入Vue\n\nimport Router from 'vue-router'; //引入vue-router\n\nimport RegisterPage from '../components/RegisterPage.vue';\nimport LoginPage from '../components/LoginPage.vue';\nimport IndexPage from '../components/IndexPage.vue';\nimport IndividualPage from '../components/IndividualPage.vue';\nimport UpdateIndividualPage from '../components/UpdateIndividual.vue';\nimport TaskPage from '../components/TaskPage.vue';\nimport TaskPublish from '../components/TaskPublish.vue';\nimport FieldPage from '../components/FieldPage.vue';\nimport Axios from 'axios';\nimport ElementUI from 'element-ui';\nVue.use(Router); //Vue全局使用Router\n\nvar router = new Router({\n  mode: 'history',\n  routes: [//配置路由，这里是个数组\n  {\n    path: '/register',\n    component: RegisterPage,\n    name: 'register'\n  }, {\n    path: '/login',\n    component: LoginPage,\n    name: 'login'\n  }, {\n    path: '/index',\n    component: IndexPage,\n    name: 'index'\n  }, {\n    path: '/individual',\n    component: IndividualPage,\n    name: 'individual'\n  }, {\n    path: '/individual/update',\n    component: UpdateIndividualPage,\n    name: 'update_individual'\n  }, {\n    path: '/task',\n    component: TaskPage,\n    name: 'task'\n  }, {\n    path: '/task/publish',\n    component: TaskPublish,\n    name: 'task_publish'\n  }, {\n    path: '/field',\n    component: FieldPage,\n    name: 'field'\n  }]\n});\nexport default router; //设置axios请求头加入token\n\nAxios.interceptors.request.use(function (config) {\n  if (config.push == '/' || config.push == '') {\n    console.log('pushing');\n    router.push({\n      name: 'index'\n    });\n  } else {\n    if (localStorage.getItem('zhigui-token')) {\n      //在请求头加入token，名字要和后端接收请求头的token名字一样 \n      config.headers.Authorization = 'Bearer:' + localStorage.getItem('zhigui-token');\n    }\n  }\n\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n}); //=============================\n//响应回来token是否过期\n\nAxios.interceptors.response.use(function (response) {\n  console.log('响应回来：' + response.data.code); //和后端token失效返回码约定401\n\n  if (response.data.code == 401) {\n    // 引用elementui message提示框  \n    ElementUI.Message({\n      message: '身份已失效',\n      type: 'err'\n    }); //清除token \n\n    localStorage.removeItem('zhigui-token'); //跳转  \n\n    router.push({\n      name: 'login'\n    });\n  } else {\n    return response;\n  }\n}, function (error) {\n  return Promise.reject(error);\n});\nrouter.beforeEach(function (to, from, next) {\n  //to到哪儿 from从哪儿离开 next跳转 为空就是放行 \n  if (to.path == '/login' || to.path == '/register') {\n    //如果跳转为登录或登录，就放行\n    next();\n  } else {\n    //取出localStorage判断\n    var token = localStorage.getItem('zhigui-token');\n\n    if (token == null || token == '') {\n      ElementUI.Message({\n        message: '请先登录'\n      });\n      next({\n        name: 'login'\n      });\n    } else {\n      next();\n    }\n  }\n});","map":{"version":3,"sources":["C:/Users/Lenovo/Desktop/Zhigui2.0/zhigui/src/router/index.js"],"names":["Vue","Router","RegisterPage","LoginPage","IndexPage","IndividualPage","UpdateIndividualPage","TaskPage","TaskPublish","FieldPage","Axios","ElementUI","use","router","mode","routes","path","component","name","interceptors","request","config","push","console","log","localStorage","getItem","headers","Authorization","error","Promise","reject","response","data","code","Message","message","type","removeItem","beforeEach","to","from","next","token"],"mappings":"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","sourcesContent":["import Vue from 'vue'   //引入Vue\r\nimport Router from 'vue-router'  //引入vue-router\r\nimport RegisterPage from '../components/RegisterPage.vue'\r\nimport LoginPage from '../components/LoginPage.vue'\r\nimport IndexPage from '../components/IndexPage.vue'\r\nimport IndividualPage from '../components/IndividualPage.vue'\r\nimport UpdateIndividualPage from '../components/UpdateIndividual.vue'\r\nimport TaskPage from '../components/TaskPage.vue'\r\nimport TaskPublish from '../components/TaskPublish.vue'\r\nimport FieldPage from '../components/FieldPage.vue'\r\nimport Axios from 'axios'\r\nimport ElementUI from 'element-ui'\r\n \r\nVue.use(Router)  //Vue全局使用Router\r\n \r\nconst router = new Router({\r\n  mode: 'history',\r\n  routes: [              //配置路由，这里是个数组\r\n  {\r\n      path:'/register',\r\n      component:RegisterPage,\r\n      name: 'register'\r\n    },\r\n    {\r\n      path:'/login',\r\n      component:LoginPage,\r\n      name: 'login'\r\n    },\r\n    {\r\n      path:'/index',\r\n      component:IndexPage,\r\n      name: 'index'\r\n    },\r\n    {\r\n      path:'/individual',\r\n      component:IndividualPage,\r\n      name: 'individual'\r\n    },\r\n    {\r\n      path:'/individual/update',\r\n      component:UpdateIndividualPage,\r\n      name: 'update_individual'\r\n    },\r\n    {\r\n      path:'/task',\r\n      component: TaskPage,\r\n      name: 'task'\r\n    },\r\n    {\r\n      path:'/task/publish',\r\n      component: TaskPublish,\r\n      name: 'task_publish'\r\n    },\r\n    {\r\n      path:'/field',\r\n      component: FieldPage,\r\n      name: 'field'\r\n    }\r\n  ]\r\n})\r\nexport default router\r\n\r\n//设置axios请求头加入token\r\nAxios.interceptors.request.use(config => { \r\n  if (config.push == '/'||config.push == '') {\r\n    console.log('pushing')\r\n    router.push({name: 'index'}); \r\n   } else { \r\n    if (localStorage.getItem('zhigui-token')) { \r\n      //在请求头加入token，名字要和后端接收请求头的token名字一样 \r\n      config.headers.Authorization='Bearer:'+localStorage.getItem('zhigui-token');  \r\n    } \r\n   } \r\n    return config; \r\n  }, \r\n  error => { \r\n   return Promise.reject(error);\r\n  });\r\n //=============================\r\n //响应回来token是否过期\r\n Axios.interceptors.response.use(response => { \r\n   console.log('响应回来：'+response.data.code) \r\n   //和后端token失效返回码约定401\r\n   if (response.data.code == 401) {\r\n     // 引用elementui message提示框  \r\n     ElementUI.Message({  \r\n      message: '身份已失效', \r\n      type: 'err'  \r\n      });\r\n     //清除token \r\n     localStorage.removeItem('zhigui-token');\r\n     //跳转  \r\n     router.push({name: 'login'}); \r\n    } else { \r\n      return response \r\n    } \r\n   }, \r\n  error => { \r\n   return Promise.reject(error); \r\n   })\r\n\r\n\r\n  router.beforeEach((to, from, next) => {\r\n    //to到哪儿 from从哪儿离开 next跳转 为空就是放行 \r\n    if (to.path == '/login'||to.path == '/register') {\r\n    //如果跳转为登录或登录，就放行\r\n    next(); \r\n    } else {\r\n    //取出localStorage判断\r\n    let token = localStorage.getItem('zhigui-token');   \r\n    if (token == null || token == '') { \r\n    ElementUI.Message({  \r\n      message: '请先登录',  \r\n      }); \r\n    next({name: 'login'});\r\n    } else {\r\n      next(); \r\n      } \r\n  }});\r\n"]},"metadata":{},"sourceType":"module"}